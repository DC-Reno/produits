"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var MDRenderer_1 = __importDefault(require("./MDRenderer"));
var moment_1 = __importDefault(require("moment"));
function Comment(_a) {
    var avatarURL = _a.avatarURL, userName = _a.userName, commentKind = _a.commentKind, comment = _a.comment, date = _a.date, privateComment = _a.privateComment, resolved = _a.resolved, onRemove = _a.onRemove, onResolve = _a.onResolve;
    return (react_1.default.createElement("div", { className: "avatar margin-bottom--md", style: { fontSize: "14px" } },
        react_1.default.createElement("img", { className: "avatar__photo avatar__photo--md", src: avatarURL, title: userName, style: { display: "block" } }),
        react_1.default.createElement("div", { className: "avatar__intro" },
            react_1.default.createElement("div", { className: "avatar__name" },
                userName,
                " - ",
                commentKind,
                " ",
                privateComment && "üõ°Ô∏è",
                resolved && (react_1.default.createElement("span", { className: "badge badge--primary margin-left--md" }, "Resolved")),
                !resolved && onResolve && (react_1.default.createElement("a", { onClick: function () { return onResolve(); }, style: { cursor: "pointer" }, title: "Mark as resolved" }, "\u2714\uFE0F?")),
                onRemove && (react_1.default.createElement("a", { onClick: function () { return onRemove(); }, style: { cursor: "pointer" }, title: "Remove" }, "\uD83D\uDDD1\uFE0F"))),
            react_1.default.createElement("small", { className: "avatar__subtitle" }, MDRenderer_1.default.render(comment)),
            date && react_1.default.createElement("small", { className: "avatar__subtitle", style: { color: "var(--ifm-color-secondary-darker)" } },
                "On ",
                date.toDateString(),
                " - ",
                moment_1.default(date).fromNow()))));
}
exports.default = Comment;
//# sourceMappingURL=Comment.js.map